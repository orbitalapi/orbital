namespace com.orbitalhq {

    type TradeComplianceResult {
        status : TradeComplianceStatus
        results : RuleEvaluationResults
    }

    type alias RuleEvaluationResults as RuleEvaluationResult[]

     type TradeRequest {
        notional : TradeNotional
        clientId : ClientId
        traderId : Username
        price : Price
        tradeValue : TradeValue
    }

    @ServiceDiscoveryClient(serviceName = "rule-aggregator")
    service TradeComplianceEvaluator {
        @HttpOperation(method = "POST" , url = "/tradeCompliance")
        operation evaluate( @RequestBody TradeRequest ) : TradeComplianceResult
    }

    enum RagStatus {
        RED,
        AMBER,
        GREEN
    }


    type alias TradeComplianceStatus as RagStatus


    type alias RuleEvaluationStatus as RagStatus

    type alias TradeNotional as Decimal

    type alias ClientId as String

    type alias Username as String

    parameter type Money {
        currency : Currency
        value : MoneyAmount
    }

    type alias Currency as String

    type alias MoneyAmount as Decimal

    type alias Price as Money


    parameter type JurisdictionRuleRequest {
        clientJurisdiction : ClientJurisdiction
        traderJurisdiction : TraderJurisdiction
    }

     parameter type NotionalLimitRuleRequest {
        notional : TradeNotional
    }

     parameter type TradeValueRuleRequest {
        tradeValue : TradeValue(this.currency == "USD")
        traderLimit : TraderMaxTradeValue
    }

     type RuleEvaluationResult {
        ruleId : String
        status : RuleEvaluationStatus
        message : String
    }

    @ServiceDiscoveryClient(serviceName = "rates-provider")
    service RateConversionService {
         @StubResponse
         @HttpOperation(method = "POST", url = "/rates/{targetCurrency}")
         operation convertRates( @RequestBody source : TradeValue, targetCurrency : Currency ) : TradeValue( from source, this.currency == targetCurrency )
    }

    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service JurisdictionRuleService {
        @StubResponse("jurisdictionRuleService")
        @HttpOperation(method = "POST" , url = "/rules/jurisdiction")
        operation evaluate( @RequestBody JurisdictionRuleRequest ) : JurisdictionRuleResult
    }
    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service NotionalLimitRuleService {
        @StubResponse("notionalLimitRuleService")
        @HttpOperation(method = "POST" , url = "/rules/notionalLimits")
        operation evaluate( @RequestBody NotionalLimitRuleRequest ) : NotionalLimitRuleResult
    }
    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service TradeValueRuleService {
        @StubResponse("tradeValueRuleService")
        @HttpOperation(method = "POST" , url = "")
        operation evaluate( @RequestBody TradeValueRuleRequest ) : TradeValueRuleResult
    }

    type TradeValueRuleResult inherits RuleEvaluationResult {}

    type NotionalLimitRuleResult inherits RuleEvaluationResult {}

    type JurisdictionRuleResult inherits RuleEvaluationResult {}

    type alias ClientJurisdiction as String

    type alias TraderJurisdiction as String

    parameter type Money {
        currency : Currency
        value : MoneyAmount
    }

    type alias Currency as String

    type alias MoneyAmount as Decimal

    type alias RuleEvaluationStatus as RagStatus

    type alias TradeValue as Money

    type alias TraderMaxTradeValue as Money


     enum RagStatus {
        RED,
        AMBER,
        GREEN
    }

    type alias ClientId as String

    type alias ClientJurisdiction as String

    type alias Username as String

    type Client {
        id : ClientId
        name : String
        jurisdiction : ClientJurisdiction
    }

     type Trader {
        username : Username
        jurisdiction : TraderJurisdiction
        limit : TraderMaxTradeValue
    }

    @ServiceDiscoveryClient(serviceName = "services")
    service ClientService {
        @HttpOperation(method = "GET" , url = "/clients/{ClientId}")
        operation getClient(  ClientId ) : Client
    }
    @ServiceDiscoveryClient(serviceName = "services")
    service TraderService {
        @HttpOperation(method = "GET" , url = "/traders/{Username}")
        operation getTrader(  Username ) : Trader
    }

    type alias CountryCode as String


}
