<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <parent>
      <groupId>io.vyne</groupId>
      <artifactId>platform</artifactId>
      <version>0.22.0-SNAPSHOT</version>
   </parent>
   <modelVersion>4.0.0</modelVersion>

   <artifactId>vyne-query-service</artifactId>

   <properties>
      <buildNumber>0</buildNumber>
      <app.main.class>io.vyne.queryService.QueryServiceApp</app.main.class>
      <app.distribution.directory>${project.build.directory}/distributions/app</app.distribution.directory>
      <!-- see the plugin below for why we're disabling this -->
      <spring-boot.repackage.skip>true</spring-boot.repackage.skip>
   </properties>

   <dependencies>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>license-client</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-csv-utils</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>protobuf-utils</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>schema-server-api</artifactId>
         <version>${project.version}</version>
      </dependency>

      <!-- use the actual dependency for tests.  at runtime, we just use the api -->
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>schema-server-core</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.taxilang</groupId>
         <artifactId>test-utils</artifactId>
         <version>${taxi.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-history-core</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>jdbc-connector</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>kafka-connector</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>s3-connector</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>blob-connector</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>sqs-connector</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <artifactId>lambda-connector</artifactId>
         <groupId>io.vyne</groupId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.taxilang</groupId>
         <artifactId>taxi-lang-service</artifactId>
         <version>${taxi.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-search</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>cask-api</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-query-api</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.taxilang</groupId>
         <artifactId>lang-to-taxi-api</artifactId>
         <version>${taxi.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-spring</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-client</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-contract-wiremock</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.bitbucket.b_c</groupId>
         <artifactId>jose4j</artifactId>
         <version>0.9.1</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
      </dependency>
      <dependency>
         <groupId>io.netty</groupId>
         <artifactId>netty-tcnative-boringssl-static</artifactId>
         <version>2.0.54.Final</version>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-security</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-actuator</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-oauth2-resource-server</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-oauth2-jose</artifactId>
      </dependency>
      <dependency>
         <groupId>org.taxilang</groupId>
         <artifactId>swagger2taxi</artifactId>
         <version>${taxi.version}</version>
      </dependency>
      <dependency>
         <groupId>org.taxilang</groupId>
         <artifactId>jsonSchema-to-taxi</artifactId>
         <version>${taxi.version}</version>
      </dependency>
      <dependency>
         <groupId>com.google.guava</groupId>
         <artifactId>guava</artifactId>
      </dependency>
      <dependency>
         <groupId>net.logstash.logback</groupId>
         <artifactId>logstash-logback-encoder</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jdbc</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.cloud</groupId>
         <artifactId>spring-cloud-starter-config</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-webflux</artifactId>
      </dependency>
      <!--      <dependency>-->
      <!--         <groupId>io.vyne</groupId>-->
      <!--         <artifactId>pipelines-orchestrator-api</artifactId>-->
      <!--         <version>${project.version}</version>-->
      <!--      </dependency>-->
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>pipeline-jet-api</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-reactor-netty</artifactId>
      </dependency>
      <dependency>
         <groupId>io.github.config4k</groupId>
         <artifactId>config4k</artifactId>
         <version>0.5.0</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-websocket</artifactId>
         <exclusions>
            <!-- Exclude the Tomcat dependency -->
            <exclusion>
               <groupId>org.springframework.boot</groupId>
               <artifactId>spring-boot-starter-tomcat</artifactId>
            </exclusion>
         </exclusions>
      </dependency>

      <dependency>
         <groupId>javax.websocket</groupId>
         <artifactId>javax.websocket-api</artifactId>
         <version>1.1</version>
      </dependency>
      <dependency>
         <groupId>com.h2database</groupId>
         <artifactId>h2</artifactId>
      </dependency>
      <dependency>
         <groupId>org.skyscreamer</groupId>
         <artifactId>jsonassert</artifactId>
         <version>1.5.1</version>
         <scope>test</scope>
         <exclusions>
            <exclusion>
               <groupId>com.vaadin.external.google</groupId>
               <artifactId>android-json</artifactId>
            </exclusion>
         </exclusions>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>test-cli</artifactId>
         <version>${project.version}</version>
      </dependency>

      <dependency>
         <groupId>org.jetbrains.kotlinx</groupId>
         <artifactId>kotlinx-coroutines-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.jetbrains.kotlinx</groupId>
         <artifactId>kotlinx-coroutines-reactor</artifactId>
      </dependency>
      <dependency>
         <groupId>org.jetbrains.kotlinx</groupId>
         <artifactId>kotlinx-coroutines-test</artifactId>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>app.cash.turbine</groupId>
         <artifactId>turbine-jvm</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.http4k</groupId>
         <artifactId>http4k-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.http4k</groupId>
         <artifactId>http4k-server-netty</artifactId>
         <scope>test</scope>
      </dependency>

      <!-- Monitoring and reporting -->

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-core</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-prometheus</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-influx</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-elastic</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-jmx</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-graphite</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-datadog</artifactId>
      </dependency>

      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-registry-dynatrace</artifactId>
      </dependency>

      <dependency>
         <groupId>ch.streamly</groupId>
         <artifactId>chronicle-flux</artifactId>
         <version>1.0.1</version>
      </dependency>
      <dependency>
         <groupId>com.squareup.okhttp3</groupId>
         <artifactId>mockwebserver</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>io.projectreactor</groupId>
         <artifactId>reactor-test</artifactId>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>io.projectreactor.kotlin</groupId>
         <artifactId>reactor-kotlin-extensions</artifactId>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
         <type>test-jar</type>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-spring</artifactId>
         <version>${project.version}</version>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.jetbrains.kotlinx</groupId>
         <artifactId>kotlinx-serialization-cbor</artifactId>
      </dependency>
      <dependency>
         <groupId>junit</groupId>
         <artifactId>junit</artifactId>
         <scope>test</scope>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>io.github.git-commit-id</groupId>
            <artifactId>git-commit-id-maven-plugin</artifactId>
            <version>5.0.0</version>
            <executions>
               <execution>
                  <id>get-the-git-infos</id>
                  <goals>
                     <goal>revision</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <generateGitPropertiesFile>true</generateGitPropertiesFile>
               <generateGitPropertiesFilename>${project.build.outputDirectory}/git.properties
               </generateGitPropertiesFilename>
            </configuration>
         </plugin>
         <!-- don't generate a source jar -->
         <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-source-plugin</artifactId>
            <configuration>
               <skipSource>true</skipSource>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>repackage</id>
                  <!-- We can't use a spring boot repackaged fat jar.
               We're using Wire (https://github.com/square/wire) for protobuf generation.
    At runtime, this uses okio (https://github.com/square/okio) generate artifacts in order to generate a protobuf schema - and it treats
    the current classpath as a zip.  This is reasonable, because normally the jar is a valid zip.
    However, spring boot rewires this to make an executable, fat jar.  That breaks okio, and therefore wire.

    Ideally, there'd be a workaround, but I haven't found one.
    See discussions here:
    https://github.com/square/okio/issues/1094
    https://github.com/square/wire/discussions/2209

    So, we're reverting to a classic jar build using maven appassembler

                -->
                  <goals>
                     <goal>repackage</goal>
                  </goals>
                  <configuration>
                     <skip>true</skip>
                  </configuration>
               </execution>
               <execution>
                  <goals>
                     <goal>build-info</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <additionalProperties>
                  <!--suppress UnresolvedMavenProperty -->
                  <baseVersion>
                     ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}
                  </baseVersion>
                  <buildNumber>
                     ${buildNumber}
                  </buildNumber>
               </additionalProperties>
            </configuration>
         </plugin>
         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>appassembler-maven-plugin</artifactId>
            <version>2.1.0</version>
            <executions>
               <execution>
                  <id>assemble-script</id>
                  <phase>package</phase>
                  <goals>
                     <goal>assemble</goal>
                  </goals>
                  <configuration>
                     <showConsoleWindow>true</showConsoleWindow>
                     <programs>
                        <program>
                           <mainClass>${app.main.class}</mainClass>
                           <id>vyne</id>
                        </program>
                     </programs>
                     <repositoryLayout>flat</repositoryLayout>
                     <repositoryName>lib</repositoryName>
                  </configuration>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <artifactId>maven-assembly-plugin</artifactId>
            <version>3.4.2</version>
            <configuration>
               <descriptors>
                  <descriptor>src/main/assembly/assembly.xml</descriptor>
               </descriptors>
               <appendAssemblyId>false</appendAssemblyId>
               <finalName>vyne</finalName>
            </configuration>
            <executions>
               <execution>
                  <id>make-assembly</id> <!-- this is used for inheritance merges -->
                  <phase>package</phase> <!-- bind to the packaging phase -->
                  <goals>
                     <goal>single</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>
         <plugin>
            <groupId>com.github.eirslett</groupId>
            <artifactId>frontend-maven-plugin</artifactId>
            <version>1.12.1</version>
            <configuration>
               <workingDirectory>src/main/web/</workingDirectory>
               <nodeVersion>v12.16.3</nodeVersion>
            </configuration>
            <executions>
               <execution>
                  <id>install-npm</id>
                  <goals>
                     <goal>install-node-and-npm</goal>
                  </goals>
               </execution>
               <execution>
                  <id>run-npm-install</id>
                  <goals>
                     <goal>npm</goal>
                  </goals>
                  <configuration>
                     <arguments>ci</arguments>
                  </configuration>
               </execution>
               <execution>
                  <id>ng-build</id>
                  <goals>
                     <goal>npm</goal>
                  </goals>
                  <configuration>
                     <arguments>run-script build-prod</arguments>
                  </configuration>
               </execution>
            </executions>
         </plugin>
      </plugins>
   </build>
</project>
