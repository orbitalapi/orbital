<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <parent>
      <artifactId>platform</artifactId>
      <groupId>io.vyne</groupId>
      <version>0.21.0-SNAPSHOT</version>
   </parent>
   <modelVersion>4.0.0</modelVersion>

   <artifactId>station</artifactId>

   <properties>
      <maven.compiler.source>11</maven.compiler.source>
      <maven.compiler.target>11</maven.compiler.target>
      <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
   </properties>

   <dependencies>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-webflux</artifactId>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>auth-common</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-data-jpa</artifactId>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>license-client</artifactId>
         <version>${project.version}</version>
      </dependency>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne-core-types</artifactId>
         <version>${project.version}</version>
         <scope>test</scope>
         <type>test-jar</type>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-security</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.boot</groupId>
         <artifactId>spring-boot-starter-actuator</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-oauth2-resource-server</artifactId>
      </dependency>
      <dependency>
         <groupId>org.springframework.security</groupId>
         <artifactId>spring-security-oauth2-jose</artifactId>
      </dependency>
      <dependency>
         <groupId>io.micrometer</groupId>
         <artifactId>micrometer-core</artifactId>
      </dependency>

      <dependency>
         <groupId>com.h2database</groupId>
         <artifactId>h2</artifactId>
      </dependency>
      <dependency>
         <groupId>org.flywaydb</groupId>
         <artifactId>flyway-core</artifactId>
      </dependency>
      <dependency>
         <groupId>org.postgresql</groupId>
         <artifactId>postgresql</artifactId>
      </dependency>
   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
            <executions>
               <execution>
                  <id>repackage</id>
                  <!-- We can't use a spring boot repackaged fat jar.
               We're using Wire (https://github.com/square/wire) for protobuf generation.
    At runtime, this uses okio (https://github.com/square/okio) generate artifacts in order to generate a protobuf schema - and it treats
    the current classpath as a zip.  This is reasonable, because normally the jar is a valid zip.
    However, spring boot rewires this to make an executable, fat jar.  That breaks okio, and therefore wire.

    Ideally, there'd be a workaround, but I haven't found one.
    See discussions here:
    https://github.com/square/okio/issues/1094
    https://github.com/square/wire/discussions/2209

    So, we're reverting to a classic jar build using maven appassembler

                -->
                  <goals>
                     <goal>repackage</goal>
                  </goals>
                  <configuration>
                     <skip>true</skip>
                  </configuration>
               </execution>
               <execution>
                  <goals>
                     <goal>build-info</goal>
                  </goals>
               </execution>
            </executions>
            <configuration>
               <additionalProperties>
                  <!--suppress UnresolvedMavenProperty -->
                  <baseVersion>
                     ${parsedVersion.majorVersion}.${parsedVersion.minorVersion}.${parsedVersion.incrementalVersion}
                  </baseVersion>
                  <buildNumber>
                     ${buildNumber}
                  </buildNumber>
               </additionalProperties>
            </configuration>
         </plugin>
      </plugins>
   </build>
</project>
