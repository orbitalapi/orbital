namespace asos.orders {

   type StringField inherits String
   type DecimalField inherits Decimal
   type IntField inherits Int
   type HpcOrderId inherits bank.orders.OrderId
   
   model Order inherits bank.orders.Order {

      // @utest bank.common.OrderBankDirection
      //
      tempSide: asos.orders.StringField? by column("Buy Sell Indicator")
      orderBankDirection: bank.common.OrderBankDirection? by when(this.tempSide){
         "BUY" -> bank.common.OrderBankDirection.BankBuys
         "SELL"  -> bank.common.OrderBankDirection.BankSell
         else -> null
      }

      // @Utest bank.orders.TimeInForce
      //
      tempTimeInForce: asos.orders.StringField? by column("Validity Period")
      orderValidityPeriod: bank.orders.TimeInForce? by when(this.tempTimeInForce){
         "GTCV" -> bank.orders.TimeInForce.GTC
         "GTTV" -> bank.orders.TimeInForce.GTT
         "GDTV" -> bank.orders.TimeInForce.GTD
         "GTSV" -> bank.orders.TimeInForce.GTT
			"GATV" -> bank.orders.ValidityPeriod.GATV
			"GADV" -> bank.orders.ValidityPeriod.GADV
			"GASV" -> bank.orders.ValidityPeriod.GASV
			"IOCV" -> bank.orders.ValidityPeriod.IOCV
         "FOKV" -> bank.orders.TimeInForce.FOK
         else -> null
      }

      // @Utest bank.orders.OrderStatus
      //
      tempOrderStatus: asos.orders.StringField? by column("Order Event Status")
      orderStatus : bank.orders.OrderStatus? by when { 
         this.executedQuantity > 0.0 && this.executedQuantity = this.requestedQuantity -> bank.orders.OrderStatus.Filled
         this.executedQuantity > 0.0 && this.executedQuantity < this.requestedQuantity -> bank.orders.OrderStatus.PartiallyFilled
         this.tempOrderStatus = "NEWO" -> bank.orders.OrderStatus.New
         this.tempOrderStatus = "TRIG" -> bank.orders.OrderStatus.New
         this.tempOrderStatus = "REMA" -> bank.orders.OrderStatus.Replaced
         this.tempOrderStatus = "REMH" -> bank.orders.OrderStatus.Replaced
         this.tempOrderStatus = "REME" -> bank.orders.OrderStatus.Replaced
         this.tempOrderStatus = "REMO" -> bank.orders.OrderStatus.Canceled
         this.tempOrderStatus = "CAMO" -> bank.orders.OrderStatus.Canceled
         this.tempOrderStatus = "PARF" -> bank.orders.OrderStatus.PartiallyFilled
         this.tempOrderStatus = "FILL" -> bank.orders.OrderStatus.Filled
         this.tempOrderStatus = "EXPI" -> bank.orders.OrderStatus.Expired
         else -> null
      }

      // @Utest bank.orders.VenueOrderStatus
      //
      tempVenueOrderStatus: asos.orders.StringField? by column("Order Event Status")
      venueOrderStatus : bank.orders.VenueOrderStatus? by when {
         this.executedQuantity > 0.0 && this.executedQuantity = this.requestedQuantity -> bank.orders.VenueOrderStatus.Filled
         this.executedQuantity > 0.0 && this.executedQuantity < this.requestedQuantity -> bank.orders.VenueOrderStatus.PartiallyFilled
         this.tempVenueOrderStatus = "NEWO" -> bank.orders.VenueOrderStatus.New
         this.tempVenueOrderStatus = "TRIG" -> bank.orders.VenueOrderStatus.New
         this.tempVenueOrderStatus = "REMA" -> bank.orders.VenueOrderStatus.Replaced
         this.tempVenueOrderStatus = "REMH" -> bank.orders.VenueOrderStatus.Replaced
         this.tempVenueOrderStatus = "REME" -> bank.orders.VenueOrderStatus.Replaced
         this.tempVenueOrderStatus = "REMO" -> bank.orders.VenueOrderStatus.Canceled
         this.tempVenueOrderStatus = "CAMO" -> bank.orders.VenueOrderStatus.Canceled
         this.tempVenueOrderStatus = "PARF" -> bank.orders.VenueOrderStatus.PartiallyFilled
         this.tempVenueOrderStatus = "FILL" -> bank.orders.VenueOrderStatus.Filled
         this.tempVenueOrderStatus = "EXPI" -> bank.orders.VenueOrderStatus.Expired
         else -> null
      }

      // @Utest bank.orders.OrderType 
      //
      tempOrderType: asos.orders.StringField? by column("Order Type")
      orderType: bank.orders.OrderType? by when(this.tempOrderType){
          "Limit" -> bank.orders.OrderType.Limit
          else -> null
      }

      // @Utest bank.common.price.PriceType
      //
      tempPriceType: asos.orders.StringField? by column("Price Notation") 
      priceType: bank.common.price.PriceType? by when(this.tempPriceType){
          "PERC" -> bank.common.price.PriceType.Percentage
          "BAPO" -> bank.common.price.PriceType.Basis
          "MONE" -> bank.common.price.PriceType.Monetary
          "YIEL" -> bank.common.price.PriceType.Yield
          else -> null
      }

      // @utest asos.orders.HpcOrderId
      //
      orderId: asos.orders.HpcOrderId by left(column("Order Identification Code"), length(column("Order Identification Code")) - 2)
      
      // @Utest bank.orders.OrderEventDateTime
      //
      orderEventDateTime : bank.orders.OrderEventDateTime? ( @format = "yyyy-MM-dd'T'HH:mm:ss.SSS") by column("Order Date Time")

      // @Utest bank.orders.OrderPriceAmount
      //
      orderPriceAmount: bank.orders.OrderPriceAmount? by column("Limit Price")

      // @Utest bank.orders.OrderCurrencyCode
      //
      quantityCurrency : bank.orders.OrderCurrencyCode? by upperCase(column("Quantity Currency"))

      // @Utest bank.common.QuantityType
      //
      tempUnitSize: asos.orders.StringField? by column("Unit Size")
      quantityType: bank.common.QuantityType? by when(this.tempUnitSize){
          "Nominal" -> bank.common.QuantityType.NOML
          "Unit" -> bank.common.QuantityType.UNIT
          "Monetary" -> bank.common.QuantityType.MONE
          else -> null
      }

      // @Utest bank.orders.OrderActivityCategory
		//
		activityCategory: bank.orders.OrderActivityCategory by default ("Hedge")
		
      // @Utest bank.orders.RequestedQuantity
      //
      requestedQuantity: bank.orders.RequestedQuantity? by column("Initial Quantity")

      // @Utest bank.orders.ExecutedQuantity
      //
      executedQuantity: bank.orders.ExecutedQuantity? by column("Traded Quantity")

      // @Utest bank.orders.RemainingQuantity
      //
      remainingQuantity: bank.orders.RemainingQuantity? by column("Remaining Quantity Including Hidden")

      // @Utest bank.orders.DisplayedQuantity
      //
      displayedQuantity: bank.orders.DisplayedQuantity? by column("Displayed Quantity")

      // @Utest asos.referencedata.HpcTraderBrokerLogin
      //
      hpcTraderBrokerLogin: asos.referencedata.HpcTraderBrokerLogin? by column("Investment Decision Within Firm")

      // @Utest bank.common.counterparty.CounterpartyLegalEntityIdentifier
      //
      counterpartyLei: bank.common.counterparty.CounterpartyLegalEntityIdentifier by default("969500AMLHB21RACL168")

      // @Utest bank.common.counterparty.CounterpartyName
      //
      counterParty: bank.common.counterparty.CounterpartyName by default("OTC ex")

      // the cacib trading entity that placed the order
      // @Utest bank.common.counterparty.BankLegalEntityIdentifier
      //
      cacibLei: bank.common.counterparty.BankLegalEntityIdentifier by default("1VUV7VQFKUOQSJ21A208")

      // @Utest bank.broker.BrokerMic
	   //
	   brokerMic: bank.broker.BrokerMic? by column ("Segment Mic Code")

      // @Utest bank.instrument.Exchange
		//
		exchange: bank.instrument.Exchange? by column("Segment Mic Code")

		// @Utest bank.common.CfiCode
		//
		cfiCode: bank.common.CfiCode? by column("CFI")

		// @Utest bank.common.cfiToPuid.Cfi2Char
		//
      cfi2char: bank.common.cfiToPuid.Cfi2Char by left(this.cfiCode, 2)

      // @Utest bank.instrument.SecurityDescription
      //
	   securityDescription: bank.instrument.SecurityDescription? by column("Instrument Description")

      // @Utest bank.instrument.InstrumentIdentifierType
      //
      identifierType : bank.instrument.InstrumentIdentifierType? by column ("Instrument Identifier Type")

      // @Utest bank.instrument.Isin
	   //
      tempInstrumentIdentifier: asos.orders.StringField? by column("Financial Instrument Identification Code")
      tempLenIdentifier: asos.orders.IntField by length(this.tempInstrumentIdentifier)
      isin: bank.instrument.Isin? by when {
         this.identifierType = "ISIN" && this.tempLenIdentifier = 12 -> tempInstrumentIdentifier
         else -> null
      }

      // @Utest bank.orders.OrderSourceSystemName
		//
		tradingSystem: bank.orders.OrderSourceSystemName? by default("HPC")
		
      // @Utest bank.instrument.UnitMultiplier
		//
		unitMultiplier: bank.instrument.UnitMultiplier by default(1)

      // @Utest bank.instrument.StrategyInstrumentId
	   //
      strategyInstrumentId: bank.instrument.StrategyInstrumentId? by when {
         this.identifierType = "ISIN" && this.tempLenIdentifier = 12 -> tempInstrumentIdentifier
         else -> null
      }

      // @Utest bank.orders.IsStrategy
      //
      tempStrategy: asos.orders.StringField? by column("Strategy Isins")
      isStrategy: bank.orders.IsStrategy? by when{
         this.tempStrategy = null ->  "FALSE"
         else -> "TRUE"
      }

      // @Utest bank.broker.BrokerName
      //
		brokerName: bank.broker.BrokerName? by default("hpc")

      // @Utest bank.instrument.swap.Leg1Notional
		//
		leg1NotionalValue: bank.instrument.swap.Leg1Notional? by when {
         this.cfi2char = "SR" -> requestedQuantity
			else -> null
		}
		
		// @Utest bank.instrument.swap.Leg1OrigCurrNotionalAmount
		//
		leg1OrigCurrNotionalAmount: bank.instrument.swap.Leg1OrigCurrNotionalAmount? by when {
         this.cfi2char = "SR" -> requestedQuantity
			else -> null
		}
		
		// @Utest bank.instrument.swap.Leg2OrigCurrNotionalAmount
		//
		leg2OrigCurrNotionalAmount: bank.instrument.swap.Leg2OrigCurrNotionalAmount? by when {
         this.cfi2char = "SR" -> requestedQuantity
			else -> null
		}

		// @Utest bank.instrument.swap.Leg1Currency
		//
		leg1NotionalCurrencyCd: bank.instrument.swap.Leg1Currency? by when {
         this.cfi2char = "SR" -> quantityCurrency
			else -> null
		}

		// @Utest bank.instrument.swap.Leg2Currency
		//
		leg2NotionalCurrencyCd: bank.instrument.swap.Leg2Currency? by when {
         this.cfi2char = "SR" -> quantityCurrency
			else -> null
		}
		
		// @Utest bank.instrument.swap.Leg2Notional
		//
		leg2NotionalValue: bank.instrument.swap.Leg2Notional? by when {
         this.cfi2char = "SR" -> requestedQuantity
			else -> null
		}

      // @Utest bank.instrument.swap.Leg1BankPayReceive
		//
      leg1PayReceive: bank.instrument.swap.Leg1BankPayReceive? by when {
         this.cfi2char = "SR" && this.tempSide = "BUY" -> bank.instrument.swap.Leg1BankPayReceive.Pay
         this.cfi2char = "SR" && this.tempSide = "SELL" -> bank.instrument.swap.Leg1BankPayReceive.Receive
         else -> null
      }

      // @Utest bank.instrument.swap.Leg2BankPayReceive
		//
      leg2PayReceive: bank.instrument.swap.Leg2BankPayReceive? by when {
         this.cfi2char = "SR" && this.tempSide = "BUY" -> bank.instrument.swap.Leg2BankPayReceive.Receive
         this.cfi2char = "SR" && this.tempSide = "SELL" -> bank.instrument.swap.Leg2BankPayReceive.Pay
         else -> null
      }

      // @Utest bank.instrument.swap.Leg1Rate
		//
		leg1Rate: bank.instrument.swap.Leg1Rate? by when {
   		this.cfi2char = "SR" && this.tempSide = "BUY" -> orderPriceAmount
   		else -> null
		}
		
      // @Utest bank.instrument.swap.Leg2Rate
		//
		leg2Rate: bank.instrument.swap.Leg2Rate? by when {
   		this.cfi2char = "SR" && this.tempSide = "SELL" -> orderPriceAmount
   		else -> null
		}

      // @Utest bank.orders.OrderMethod
      //
		tradeActivityType: bank.orders.OrderMethod by default("GUI")

   }

}

