namespace hatti.rfq {
    type RfqId inherits bank.rfq.RfqId
    type StringField inherits String
    type DecimalField inherits Decimal


    model RfqIngestion inherits bank.rfq.Rfq{
        // @utest bank.rfq.RfqId
        //
        @Indexed
        @Id
        rfqId : hatti.rfq.RfqId? by column("Inquiry ID")

        // @utest bank.rfq.RfqDate
        //
        rfqDate: bank.rfq.RfqDate?  (@format = "MM/dd/yyyy HH:mm:ss.SSS") by column("Inquiry Timestamp")

        // @utest bank.rfq.RfqEventDateTime
        //
        rfqEventDateTime : bank.rfq.RfqEventDateTime? (@format = "MM/dd/yyyy HH:mm:ss.SSS") by column("Inquiry Timestamp")

        // @utest bank.common.counterparty.CounterpartyLegalEntityIdentifier
        //
        counterpartyLegalEntityIdentifier: bank.common.counterparty.CounterpartyLegalEntityIdentifier by column("CounterParty LEI")

        // @utest bank.common.counterparty.BankLegalEntityIdentifier
        //
        cacibLegalEntityIdentifier: bank.common.counterparty.BankLegalEntityIdentifier by column("Aggressor LEI")

        // @utest bank.rfq.CustomerLongName
        //
        customerLongName : bank.rfq.CustomerLongName? by column("CounterParty")

        // @utest bank.rfq.CustomerTrader
        //
        customerTrader : bank.rfq.CustomerTrader? by column("CounterParty Trader")

        // @utest hatti.referencedata.TraderBrokerLogin
        //
        traderId : hatti.referencedata.TraderBrokerLogin? by column("Trader Token")

        // @utest bank.instrument.InstrumentId
        //
        instrumentId: bank.instrument.InstrumentId? by column("ISIN")

        // @utest bank.instrument.InstrumentIdentifierType
        //
        instrumentIdentifierType : bank.instrument.InstrumentIdentifierType? by default ("ISIN")

        // @utest bank.rfq.RfqBankDirection
        //
        bidOffer: hatti.rfq.StringField? by column("Bid/Offer")
        bankDirection : bank.rfq.RfqBankDirection? by when {
            this.bidOffer == "Offer" -> bank.rfq.RfqBankDirection.SELL
            this.bidOffer == "Bid" -> bank.rfq.RfqBankDirection.BUY
            else -> null
        }

        // @utest bank.rfq.RfqCurrencyCode
        //
        currency : bank.rfq.RfqCurrencyCode? by column("Currency")

        // @utest bank.rfq.RfqPrice
        //
        tempPrice: hatti.rfq.DecimalField by column("Price")
        price : bank.rfq.RfqPrice? by when {
            this.tempPrice > 0.0 ->  this.tempPrice
            else -> null
        }

        // @utest bank.rfq.RfqPriceType
        //
        protocol: hatti.rfq.StringField? by column("Protocol")

        priceType : bank.rfq.RfqPriceType? by when {
             this.protocol == "Price" &&  this.price != null -> "PCT"
             this.protocol == "Spread" &&  this.price != null -> "Spread"
            else -> null
        }

        // @utest bank.instrument.Exchange
        //
        venue : bank.instrument.Exchange? by column("Venue of Execution")

        // @utest bank.rfq.RfqStatus
        //
        status: hatti.rfq.StringField? by column("Status")
        rfqStatus : bank.rfq.RfqStatus? by when (this.status){
            "Timed Out" -> bank.rfq.RfqStatus.CustomerTimeOut
            "DNT" -> bank.rfq.RfqStatus.CustRejected
            "Missed" -> bank.rfq.RfqStatus.DealerRejected
            "Done" -> bank.rfq.RfqStatus.DealerDone
            "Passed" -> bank.rfq.RfqStatus.Passed
            "Covered" -> bank.rfq.RfqStatus.Covered
        }

        // @utest bank.orders.QuantityRequired
        //
        quantityRequired: bank.orders.QuantityRequired? by column ("Inquiry Volume")

        tempNotionalMulitplier: hatti.rfq.DecimalField by default(1000)

        // @utest bank.rfq.QuantityNominal
        //
        quantityNominal : bank.rfq.QuantityNominal? by (this.quantityRequired * this.tempNotionalMulitplier)

        // @utest  bank.instrument.MaturityDateDate
        //
        maturityDate: bank.instrument.MaturityDateDate?  (@format = "MM/dd/yyyy") by column("Maturity")

        // @utest bank.instrument.SettlementDateDate
        //
        settlementDate: bank.instrument.SettlementDateDate?  (@format = "MM/dd/yyyy") by column("Settlement Date")

        // @utest bank.rfq.NumberOfDealers
        //
        numberOfDealers : bank.rfq.NumberOfDealers? by default(1)

        // @utest bank.rfq.LegId
        //
        legId : bank.rfq.LegId by default(0)

        // @utest bank.rfq.NumberOfLegs
        //
        numberOfLegs : bank.rfq.NumberOfLegs? by default(1)

        // @utest bank.rfq.RfqIsAutoNeg
        //
        isAutoNeg: bank.rfq.RfqIsAutoNeg by default(0)

        // @utest bank.rfq.RfqIsAutoRejected
        //
        isAutoRejected: bank.rfq.RfqIsAutoRejected by default(0)

        // @utest bank.rfq.RfqSourceName
        //
        rfqSourceName : bank.rfq.RfqSourceName? by column("Venue of Execution")

        // @utest bank.rfq.RfqCBIsVoice
        //
        isVoice : bank.rfq.RfqCBIsVoice by default("0")

        // @Utest bank.broker.BrokerName
      	//
        brokerName: bank.broker.BrokerName? by default("marketaxess")
    }
}
