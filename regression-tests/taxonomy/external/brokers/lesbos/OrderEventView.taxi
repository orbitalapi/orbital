import bank.trade.MarketTradeId
import lesbos.orders.OrderSent;
import lesbos.orders.OrderFilled;
import vyne.aggregations.sumOver;

namespace lesbos.orders{
   
   type SellCumulativeQuantity inherits Decimal
   type BuyCumulativeQuantity inherits Decimal
   type OrderCumulativeSum inherits Decimal
   type BuyCumulativeSumOrdered inherits Decimal
   type SellCumulativeSumOrdered inherits Decimal

   view DWOrderReportView inherits bank.orders.Order with query{
      find {OrderSent[]} as{
         // @Utest lesbos.orders.DealerwebSentOrderId
         //
         orderId: lesbos.orders.OrderSent::lesbos.orders.DealerwebSentOrderId
         
         // @Utest bank.orders.OrderEventDateTime
         //
         orderDateTime: OrderSent::bank.orders.OrderEventDateTime
         
         // @Utest bank.orders.OrderType
         //
         orderType: OrderSent::bank.orders.OrderType
         
         // @Utest bank.instrument.SecurityDescription
         //
         subSecurityType: OrderSent::bank.instrument.SecurityDescription
         
         // @Utest bank.orders.OrderCurrencyCode
         //
         quantityCurrency: OrderSent::bank.orders.OrderCurrencyCode
         
         // @Utest bank.instrument.StrategyInstrumentId
         //
         identifierValue: OrderSent::bank.instrument.StrategyInstrumentId
         
         // @utest bank.common.OrderBankDirection
         //
         orderBankDirection: OrderSent::bank.common.OrderBankDirection
         
         // @Utest bank.orders.RequestedQuantity
         //
         requestedQuantity: OrderSent::bank.orders.RequestedQuantity
         
         // @Utest bank.instrument.InstrumentIdentifierType
         //
         identifierType: OrderSent::bank.instrument.InstrumentIdentifierType
         
         // @Utest bank.common.QuantityType
         //
         quantityNotation: OrderSent::bank.common.QuantityType
         
         // @Utest bank.instrument.UnitMultiplier
         //
         unitMultiplier: OrderSent::bank.instrument.UnitMultiplier
         
         // @Utest bank.instrument.Exchange
         //
         exchange: OrderSent::bank.instrument.Exchange
         
         // @Utest bank.broker.BrokerMic
         //
         brokerMic: OrderSent::bank.broker.BrokerMic
         
         // @Utest bank.orders.OrderMethod
         //
         method: OrderSent::bank.orders.OrderMethod
         
         // @Utest bank.orders.OrderActivityCategory
         //
         activityCategory: OrderSent::bank.orders.OrderActivityCategory
         
         // @Utest bank.orders.OrderSourceSystemName
         //
         sourceSystem: OrderSent::bank.orders.OrderSourceSystemName
         
         // @Utest bank.common.counterparty.CounterpartyName
         //
         counterParty: OrderSent::bank.common.counterparty.CounterpartyName
         
         // @Utest bank.instrument.Isin	
         //
         isin: OrderSent::bank.instrument.Isin
         
         // @Utest lesbos.referencedata.DealerwebTraderBrokerLogin
         //
         traderId: OrderSent::lesbos.referencedata.DealerwebTraderBrokerLogin
         
         // @Utest bank.orders.TradeActivityType
         //
         tradeActivityType: OrderSent::bank.orders.TradeActivityType
         
         // @Utest bank.common.counterparty.BankLegalEntityIdentifier
         //
         legalEntityId: OrderSent::bank.common.counterparty.BankLegalEntityIdentifier
         
         // @Utest bank.orders.TimeInForce
         //
         timeInForce: OrderSent::bank.orders.TimeInForce
         
         // @Utest bank.orders.OrderStatus
         //
         entryType: OrderSent::bank.orders.OrderStatus
         
         // @Utest bank.orders.VenueOrderStatus
         //
         venueOrderStatus: OrderSent::bank.orders.VenueOrderStatus
         
         // @Utest bank.orders.RemainingQuantity
         //
         leavesQuantity: OrderSent::bank.orders.RemainingQuantity
         
         // @Utest bank.orders.DisplayedQuantity
         //
         displayQuantity: OrderSent::bank.orders.DisplayedQuantity
         
         // @Utest bank.orders.ExecutedQuantity
      	//
         executedQuantity: OrderSent::bank.orders.ExecutedQuantity
         
         // @Utest bank.orders.OrderPriceAmount
         //
         orderPriceAmount: bank.orders.OrderPriceAmount
         
         // @Utest bank.common.price.PriceType
         //
         priceType: bank.common.price.PriceType

         // @Utest lesbos.orders.BuyCumulativeSumOrdered
         //
         buyCumulativeSumOrdered: lesbos.orders.BuyCumulativeSumOrdered
         
         // @Utest lesbos.orders.SellCumulativeSumOrdered
         //
         sellCumulativeSumOrdered: lesbos.orders.SellCumulativeSumOrdered

         // @Utest lesbos.orders.OrderCumulativeSum
         //
         orderCumulativeSum: lesbos.orders.OrderCumulativeSum

         // @Utest lesbos.orders.SellCumulativeQuantity
         // 
         sellCumulativeQuantity: SellCumulativeQuantity

         // @Utest lesbos.orders.BuyCumulativeQuantity
         // 
         buyCumulativeQuantity: BuyCumulativeQuantity

         // @Utest bank.orders.CumulativeQuantity
         //
         cumulativeQuantity: OrderSent::bank.orders.CumulativeQuantity
         
         // @Utest bank.instrument.Cusip
		   //
         cusip: OrderSent::bank.instrument.Cusip

         // @Utest bank.trade.MarketTradeId
         //
         marketTradeId: bank.trade.MarketTradeId

         // @Utest bank.broker.BrokerName
         //
         brokerName: OrderSent::bank.broker.BrokerName

         // @Utest lesbos.orders.DealerwebOrderSell
         //
         dealerwebOrderSell: DealerwebOrderSell

         // @Utest lesbos.orders.DealerwebOrderBuy
         //
         dealerwebOrderBuy: DealerwebOrderBuy
      },

      find {
         OrderFilled[] (joinTo OrderSent[])
      } as {
         // @Utest lesbos.orders.DealerwebFilledOrderId
         //
         orderId: OrderFilled::lesbos.orders.DealerwebFilledOrderId
         
         // @Utest bank.orders.OrderEventDateTime
         //
         orderDateTime: OrderFilled::bank.orders.OrderEventDateTime
         
         // @Utest bank.orders.OrderType
         //
         orderType: OrderFilled::bank.orders.OrderType
         
         // @Utest bank.instrument.SecurityDescription
         //
         subSecurityType: OrderFilled::bank.instrument.SecurityDescription
         
         // @Utest bank.orders.OrderCurrencyCode
         //
         quantityCurrency: OrderFilled::bank.orders.OrderCurrencyCode
         
         // @Utest bank.instrument.StrategyInstrumentId
         //
         identifierValue: OrderFilled::bank.instrument.StrategyInstrumentId
         
         // @utest bank.common.OrderBankDirection
         //
         orderBankDirection: OrderFilled::bank.common.OrderBankDirection
         
         // @Utest bank.orders.RequestedQuantity
		   //
         requestedQuantity: OrderSent::bank.orders.RequestedQuantity
         
         // @Utest bank.instrument.InstrumentIdentifierType
         //
         identifierType: OrderFilled::bank.instrument.InstrumentIdentifierType
         
         // @Utest bank.common.QuantityType
         //
         quantityNotation: OrderFilled::bank.common.QuantityType
         
         // @Utest bank.instrument.UnitMultiplier
         //
         unitMultiplier: OrderFilled::bank.instrument.UnitMultiplier
         
         // @Utest bank.instrument.Exchange
         //
         exchange: OrderFilled::bank.instrument.Exchange
         
         // @Utest bank.broker.BrokerMic
         //
         brokerMic: OrderFilled::bank.broker.BrokerMic
         
         // @Utest bank.orders.OrderMethod
         //
         method: OrderFilled::bank.orders.OrderMethod
         
         // @Utest bank.orders.OrderActivityCategory
         //
         activityCategory: OrderFilled::bank.orders.OrderActivityCategory
         
         // @Utest bank.orders.OrderSourceSystemName
         //
         sourceSystem: OrderFilled::bank.orders.OrderSourceSystemName
         
         // @Utest bank.common.counterparty.CounterpartyName
         //
         counterParty: OrderFilled::bank.common.counterparty.CounterpartyName
         
         // @Utest bank.instrument.Isin
         //
         isin: OrderFilled::bank.instrument.Isin
         
         // @Utest lesbos.referencedata.DealerwebTraderBrokerLogin
         //
         traderId: OrderFilled::lesbos.referencedata.DealerwebTraderBrokerLogin
         
         // @Utest bank.orders.TradeActivityType
         //
         tradeActivityType: OrderFilled::bank.orders.TradeActivityType
         
         // @Utest bank.common.counterparty.BankLegalEntityIdentifier
         //
         legalEntityId: OrderFilled::bank.common.counterparty.BankLegalEntityIdentifier
         
         // @Utest bank.orders.TimeInForce
         //
         timeInForce: OrderFilled::bank.orders.TimeInForce
         
         // @Utest bank.orders.OrderStatus
         //
         entryType: bank.orders.OrderStatus by when {

            OrderSent::bank.orders.RequestedQuantity = DWOrderReportView::bank.orders.CumulativeQuantity -> OrderFilled::bank.orders.OrderStatus

            else -> "PartiallyFilled"

         }
         
         // @Utest bank.orders.VenueOrderStatus
         //
         venueOrderStatus: bank.orders.VenueOrderStatus by when {
            OrderSent::bank.orders.RequestedQuantity = OrderFilled::bank.orders.ExecutedQuantity -> OrderFilled::bank.orders.OrderStatus
            else -> "PartiallyFilled"
         }
         
         // @Utest bank.orders.RemainingQuantity?
         //
         leavesQuantity: bank.orders.RemainingQuantity by when {
            OrderSent::bank.orders.RequestedQuantity = OrderFilled::bank.orders.ExecutedQuantity -> 0
            else -> (OrderSent::bank.orders.RequestedQuantity - DWOrderReportView::bank.orders.CumulativeQuantity)
         }

         // @Utest bank.orders.DisplayedQuantity
         //
         displayQuantity: bank.orders.DisplayedQuantity by when {
            OrderSent::bank.orders.RequestedQuantity = OrderFilled::bank.orders.ExecutedQuantity -> 0
            else -> (OrderSent::bank.orders.RequestedQuantity - DWOrderReportView::bank.orders.CumulativeQuantity)
         }

         // @Utest bank.orders.ExecutedQuantity
      	//
         executedQuantity: OrderFilled::bank.orders.ExecutedQuantity
         
         // @Utest bank.orders.OrderPriceAmount
         //
         orderPriceAmount: OrderFilled::bank.orders.OrderPriceAmount
         
         // @Utest bank.common.price.PriceType
         //
         priceType: OrderFilled::bank.common.price.PriceType

         // @Utest lesbos.orders.BuyCumulativeSumOrdered
         //
         buyCumulativeSumOrdered: lesbos.orders.BuyCumulativeSumOrdered by sumOver(OrderFilled::bank.orders.ExecutedQuantity, OrderFilled::DealerwebOrderBuy, OrderFilled::DealerwebMarketTradeId)
         
         // @Utest lesbos.orders.SellCumulativeSumOrdered
         //
         sellCumulativeSumOrdered: SellCumulativeSumOrdered by sumOver(OrderFilled::bank.orders.ExecutedQuantity, OrderFilled::DealerwebOrderSell, OrderFilled::DealerwebMarketTradeId)

         // @Utest lesbos.orders.OrderCumulativeSum
         //
         orderCumulativeSum: lesbos.orders.OrderCumulativeSum by sumOver(OrderFilled::bank.orders.ExecutedQuantity, OrderFilled:: DealerwebFilledOrderId, OrderFilled::DealerwebMarketTradeId)

         // @Utest lesbos.orders.SellCumulativeQuantity
         //
         sellCumulativeQuantity: SellCumulativeQuantity by when {
            OrderFilled::DealerwebOrderSell != null -> sumOver(OrderFilled::bank.orders.ExecutedQuantity, OrderFilled::DealerwebOrderSell, OrderFilled::DealerwebMarketTradeId)
            else -> (DWOrderReportView::OrderCumulativeSum - DWOrderReportView::BuyCumulativeSumOrdered)
         }

         // @Utest lesbos.orders.BuyCumulativeQuantity
         //
         buyCumulativeQuantity: BuyCumulativeQuantity by when {
            OrderFilled::DealerwebOrderBuy != null -> sumOver(OrderFilled::bank.orders.ExecutedQuantity, OrderFilled::DealerwebOrderBuy, OrderFilled::DealerwebMarketTradeId)
            else -> (DWOrderReportView::OrderCumulativeSum - DWOrderReportView::SellCumulativeSumOrdered)
         }

         // @Utest bank.orders.CumulativeQuantity
         //
         cumulativeQuantity: bank.orders.CumulativeQuantity by when{
            OrderSent::bank.common.OrderBankDirection = "BankBuys" -> (DWOrderReportView::BuyCumulativeQuantity - DWOrderReportView::SellCumulativeQuantity)
            else -> (DWOrderReportView::SellCumulativeQuantity - DWOrderReportView::BuyCumulativeQuantity)
         }

         // @Utest bank.instrument.Cusip
         //
         cusip: OrderFilled::bank.instrument.Cusip

         // @Utest bank.trade.MarketTradeId
         //
         marketTradeId: OrderFilled::bank.trade.MarketTradeId

         // @Utest bank.broker.BrokerName
         //
         brokerName: OrderFilled::bank.broker.BrokerName

         // @Utest lesbos.orders.DealerwebOrderSell
         //
         dealerwebOrderSell: OrderFilled::DealerwebOrderSell

         // @Utest lesbos.orders.DealerwebOrderBuy
         //
         dealerwebOrderBuy: OrderFilled::DealerwebOrderBuy
      }
   }
   

}
