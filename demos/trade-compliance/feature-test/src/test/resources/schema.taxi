namespace io.vyne {

    type TradeComplianceResult {
        status : io.vyne.TradeComplianceStatus
        results : RuleEvaluationResults
    }

    type alias RuleEvaluationResults as io.vyne.RuleEvaluationResult[]

     type TradeRequest {
        notional : io.vyne.TradeNotional
        clientId : io.vyne.ClientId
        traderId : io.vyne.Username
        price : io.vyne.Price
    }

    @ServiceDiscoveryClient(serviceName = "rule-aggregator")
    service TradeComplianceEvaluator {
        @HttpOperation(method = "POST" , url = "/tradeCompliance")
        operation evaluate( @RequestBody TradeRequest ) : TradeComplianceResult
    }

    enum RagStatus {
        RED,
        AMBER,
        GREEN
    }


    type alias TradeComplianceStatus as RagStatus


    type alias RuleEvaluationStatus as io.vyne.RagStatus

    type alias TradeNotional as Decimal

    type alias ClientId as String

    type alias Username as String

    parameter type Money {
        currency : Currency
        value : MoneyAmount
    }

    type alias Currency as String

    type alias MoneyAmount as Decimal

    type alias Price as Money


    parameter type JurisdictionRuleRequest {
        clientJurisdiction : io.vyne.ClientJurisdiction
        traderJurisdiction : io.vyne.TraderJurisdiction
    }

     parameter type NotionalLimitRuleRequest {
        notional : Decimal
    }

     parameter type TradeValueRuleRequest {
        tradeValue : io.vyne.TradeValue
        traderLimit : io.vyne.TraderMaxTradeValue
    }

     type RuleEvaluationResult {
        ruleId : String
        status : io.vyne.RuleEvaluationStatus
        message : String
    }

    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service JurisdictionRuleService {
        @StubResponse("jurisdictionRuleService")
        @HttpOperation(method = "POST" , url = "/rules/jurisdiction")
        operation evaluate( @RequestBody JurisdictionRuleRequest ) : RuleEvaluationResult
    }
    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service NotionalLimitRuleService {
        @HttpOperation(method = "POST" , url = "/rules/notionalLimits")
        operation evaluate( @RequestBody NotionalLimitRuleRequest ) : RuleEvaluationResult
    }
    @ServiceDiscoveryClient(serviceName = "rules-provider")
    service TradeValueRuleService {
        @HttpOperation(method = "POST" , url = "")
        operation evaluate( @RequestBody TradeValueRuleRequest ) : RuleEvaluationResult
    }

    // type alias JurisdictionRuleResult as RuleEvaluationResult

    type alias ClientJurisdiction as String

    type alias TraderJurisdiction as String

    parameter type Money {
        currency : Currency
        value : MoneyAmount
    }

    type alias Currency as String

    type alias MoneyAmount as Decimal

    type alias RuleEvaluationStatus as io.vyne.RagStatus

    type alias TradeValue as io.vyne.Money

    type alias TraderMaxTradeValue as io.vyne.Money


     enum RagStatus {
        RED,
        AMBER,
        GREEN
    }

    type alias ClientId as String

    type alias ClientJurisdiction as String

    type alias Username as String

    type Client {
        id : io.vyne.ClientId
        name : String
        jurisdiction : io.vyne.ClientJurisdiction
    }

     type ClientService {
        clients : Map
    }

     type Map {

    }

     type Trader {
        username : io.vyne.Username
        jurisdiction : TraderJurisdiction
    }

     type TraderService {
        traders : Map
    }

    @ServiceDiscoveryClient(serviceName = "services")
    service ClientService {
        @HttpOperation(method = "GET" , url = "/clients/{io.vyne.ClientId}")
        operation getClient(  io.vyne.ClientId ) : Client
    }
    @ServiceDiscoveryClient(serviceName = "services")
    service TraderService {
        @HttpOperation(method = "GET" , url = "/traders/{io.vyne.Username}")
        operation getTrader(  io.vyne.Username ) : Trader
    }

    type alias CountryCode as String


}
