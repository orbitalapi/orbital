## This file stands up an Orbital instance, along with a Postgres database
##
## Orbital will create a simple, single project workspace, which by default
## watches the directory where this docker-compose file is deployed.
##
## You can launch orbital directly by downloading this file, and
## running docker-compose up.
##
## For example:
##
## curl https://start.orbitalhq.com -o "docker-compose.yml"
## optionally:
## docker-compose pull
## docker-compose up -d
##
## Also, you can launch Orbital pre-configured from within a Taxi project
## by running:
##
## taxi orbital
##
## The following variables can be set in a .env file:
##
## ORBITAL_VERSION (default: next)
## SCHEMA_PATH (default: current directory .)

version: "3.3"

services:
   orbital:
      image: orbitalhq/orbital:${ORBITAL_VERSION:-next}
      environment:
         JAVA_OPTS: >-
            -Xms256m
            -Xmx1024m
         OPTIONS: >-
            --vyne.analytics.persistRemoteCallResponses=true
            --vyne.analytics.persistResults=true
            --vyne.db.username=orbital
            --vyne.db.password=changeme
            --vyne.db.host=postgres
            --vyne.workspace.project-file=/opt/service/workspace/taxi.conf
#            If you're using a workspace, rather than a single-project config,
#           use this option.
#            --vyne.workspace.config-file=/opt/service/workspace/workspace.conf
      ports:
         - "9022:9022"
      expose:
         - 9022
      volumes:
         - ~/.orbital/license/:/opt/var/vyne/license/
         - .:/opt/service/workspace
      depends_on:
         - postgres
      deploy:
         resources:
            limits:
               memory: 600mb

   postgres:
      image: postgres:15
      expose:
         - 5432
      ports:
         - "25432:5432"
      environment:
         POSTGRES_DB: orbital
         POSTGRES_USER: orbital
         POSTGRES_PASSWORD: changeme
      volumes:
         - postgres_data:/var/lib/postgresql/data

## The below services are optional. Uncomment them to include.

   # stream-server is responsible for running
   # ETL pipelines and saved stream queries, if you have
   # any configured.
   # Optional, can omit if you're not using either of those.
#   stream-server:
#      image: orbitalhq/stream-server:${ORBITAL_VERSION:-next}
#      environment:
#         JAVA_OPTS: >-
#            -Xms256m
#            -Xmx1024m


   # prometheus instance, which scrapes metrics from
   # the orbital and the stream-server
   # Optional.
   # If provided (and configured), then
   # metrics are shown in endpoint dashboards
#   prometheus:
#      image: prom/prometheus:v2.44.0
#      ports:
#         - "9090:9090"
#      volumes:
#         # Get a sample prometheus.yml file from docs
#         - ./prometheus.yml:/etc/prometheus/prometheus.yml

volumes:
   postgres_data:
