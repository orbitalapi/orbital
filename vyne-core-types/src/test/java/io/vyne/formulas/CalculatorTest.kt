package io.vyne.formulas

import com.winterbe.expekt.should
import lang.taxi.types.FormulaOperator
import org.junit.Test
import java.math.BigDecimal
import kotlin.test.fail

class CalculatorTest {
   data class TestScenario(val inputA:Any, val inputB:Any, val operator: FormulaOperator, val expected:Any) {
      val values = listOf(inputA,inputB)
   }

   @Test
   fun numericCalculationsBehaveAsExpected() {
      val calculator = NumberCalculator()
      listOf(
         TestScenario(1, 2, FormulaOperator.Add, 3),
         TestScenario(2, -1, FormulaOperator.Add, 1),
         TestScenario(0, -1, FormulaOperator.Add, -1),
         TestScenario(3, 1, FormulaOperator.Subtract, 2),
         TestScenario(3, -1, FormulaOperator.Subtract, 4),
         TestScenario(-2, -1, FormulaOperator.Subtract, -1),
         TestScenario(1L, 2L, FormulaOperator.Add, 3L),
         TestScenario(1.5, 4.0, FormulaOperator.Add, 5.5),
         TestScenario(1.5, 4.0, FormulaOperator.Multiply, 6.0),

         // When mixing types, you'll get a BigDecimal back
         TestScenario(1.5, 4, FormulaOperator.Multiply, 6.0.toBigDecimal()),
         TestScenario(2L, 4.0, FormulaOperator.Multiply, 8.0.toBigDecimal()),
         TestScenario(4, 0.55003, FormulaOperator.Divide, BigDecimal("7.272330600149082777303056196934712652037161609366761812992018617166336381651909895823864152864389215133719978910241259567659945821137028889333309092231332836390742323146010217624493209461302110793956693271276112212061160300347253786157118702616220933403632529134774466847262876570368888969692562223878697525589513299274585022635128992964020144355762412959293129465665509154046142937657945930221987891569550751777175790411432103703434358125920404341581368289002418049924549570023453266185480791956802356235114448302819846190207806846899260040361434830827409414031961892987655218806246931985528062105703325273166918168099921822446048397360143992145882951838990600512699307310510335799865461883897241968619893460356707815937312510226714906459647655582422776939439666927258513172008799520026180390160536697998291002308964965547333781793720342526771267021798810973946875624965910950311801174481391924076868534443575804956093304001599912732032798211006672363325636783448175554060687598858244095776594003963420177081250113630165627329418395360253077104885188080650146355653328000290893224005963311092122247877388506081486464374670472519680744686653455266076395832954566114575568605348799156409650382706397832845481155573332363689253313455629692925840408704979728378452084431758267730851044488482446412013890151446284748104648837336145301165390978673890515062814755558787702488955147901023580531970983400905405159718560805774230496518371725178626620366161845717506317837208879515662782030071087031616457284148137374325036816173663254731560096721996981982800938130647419231678272094249404577932112793847608312273875970401614457393233096376561278475719506208752249877279421122484228133010926676726723996872897841935894405759685835318073559624020507972292420413431994618475355889678744795738414268312637492500409068596258385906223296911077577586677090340526880351980801047215606421467919931640092358598621893351271748813701070850680871952438957875024998636438012472046979255676963074741377743032198243732160063996509281311928440266894533025471337927022162427503954329763831063760158536807083250004545206625093176735814410123084195407523226005854226133120011635728960238532443684889915095540243259458574986818900787229787466138210643055833318182644583022744213951966256386015308255913313819246222933294547570132538225187717033616348199189135138083377270330709234041779539297856480555606057851389924185953493445812046615639146955620602512590222351508099558205916040943221278839336036216206388742432230969219860734869007145064814646473828700252713488355180626511281202843481264658291365925494973001472646946530189262403868879879279312037525225896769267130883769976183117284511753904332490955038816064578295729323855062451139028780248350089995091176844899369125320437067069068959874915913677435776230387433412722942384960820318891696816537279784739014235587149791829536570732505499700016362743850335436248931876443103103467083613621075214079232041888624256858716797265603694343944875734050869952548042834027234878097558315000999945457520498881879170227078522989655109721287929749286402559860371252477137610675781321018853517080886497100158173190553242550406341472283330000181808265003727069432576404923367816300929040234169045324800465429158409541297747395596603821609730378342999472756031489191498645528425722233332727305783320909768558078650255440612330236532552769848917331781902805301529007508681344653927967565405523335090813228369361671181571914259222224242314055596967438139737832481864625565878224824100503608894060323982328236641637728851153573441448648255549697289238768794429394760285802592585858953148010108539534207225060451248113739250586331654637019798920058905877861207570496154755195171172481501009035870770685235350799047324691380470156173299638201552642583131829172954202498045561151209934003599803647073795974765012817482682762758394996636547097431049215497336508917695398432812755667872661491191389560569423485991673181462829300219988000654509754013417449957275057724124138683344544843008563169281675544970274348671890624147773757795029362034798101921713361089395123902332600039997818300819955275166809083140919586204388851517189971456102394414850099085504427031252840754140683235459884006326927622129702016253658891333200007272330600149082777303056196934712652037161609366761812992018617166336381651909895823864152864389215133719978910241259567659945821137028889333309092231332836390742323146010217624493209461302110793956693271276112212061160300347253786157118702616220933403632529134774466847262876570368888969692562223878697525589513299274585022635128992964020144355762412959293129465665509154046142937657945930221987891569550751777175790411432103703434358125920404341581368289002418049924549570023453266185480791956802356235114448302819846190207806846899260040361434830827409414031961892987655218806246931985528062105703325273166918168099921822446048397360143992145882951838990600512699307310510335799865461883897241968619893460356707815937312510226714906459647655582422776939439666927258513172008799520026180390160536697998291002308964965547333781793720342526771267021798810973946875624965910950311801174481391924076868534443575804956093304001599912732032798211006672363325636783448175554060687598858244095776594003963420177081250113630165627329418395360253077104885188080650146355653328000290893224005963311092122247877388506081486464374670472519680744686653455266076395832954566114575568605348799156409650382706397832845481155573332363689253313455629692925840408704979728378452084431758267730851044488482446412013890151446284748104648837336145301165390978673890515062814755558787702488955147901023580531970983400905405159718560805774230496518371725178626620366161845717506317837208879515662782030071087031616457284148137374325036816173663254731560096721996981982800938130647419231678272094249404577932112793847608312273875970401614457393233096376561278475719506208752249877279421122484228133010926676726723996872897841935894405759685835318073559624020507972292420413431994618475355889678744795738414268312637492500409068596258385906223296911077577586677090340526880351980801047215606421467919931640092358598621893351271748813701070850680871952438957875024998636438012472046979255676963074741377743032198243732160063996509281311928440266894533025471337927022162427503954329763831063760158536807083250004545206625093176735814410123084195407523226005854226133120011635728960238532443684889915095540243259458574986818900787229787466138210643055833318182644583022744213951966256386015308255913313819246222933294547570132538225187717033616348199189135138083377270330709234041779539297856480555606057851389924185953493445812046615639146955620602512590222351508099558205916040943221278839336036216206388742432230969219860734869007145064814646473828700252713488355180626511281202843481264658291365925494973001472646946530189262403868879879279312037525225896769267130883769976183117284511753904332490955038816064578295729323855062451139028780248350089995091176844899369125320437067069068959874915913677435776230387433412722942384960820318891696816537279784739014235587149791829536570732505499700016362743850335436248931876443103103467083613621075214079232041888624256858716797265603694343944875734050869952548042834027234878097558315000999945457520498881879170227078522989655109721287929749286402559860371252477137610675781321018853517080886497100158173190553242550406341472283330000181808265003727069432576404923367816300929040234169045324800465429158409541297747395596603821609730378342999472756031489191498645528425722233332727305783320909768558078650255440612330236532552769848917331781902805301529007508681344653927967565405523335090813228369361671181571914259222224242314055596967438139737832481864625565878224824100503608894060323982328236641637728851153573441448648255549697289238768794429394760285802592585858953148010108539534207225060451248113739250586331654637019798920058905877861207570496154755195171172481501009035870770685235350799047324691380470156173299638201552642583131829172954202498045561151209934003599803647073795974765012817482682762758394996636547097431049215497336508917695398432812755667872661491191389560569423485991673181462829300219988000654509754013417449957275057724124138683344544843008563169281675544970274348671890624147773757795029362034798101921713361089395123902332600039997818300819955275166809083140919586204388851517189971456102394414850099085504427031252840754140683235459884006326927622129702016253658891333200007272330600149082777303056196934712652037161609366761812992018617166336381651909895823864152864389215133719978910241259567659945821137028889333309092231332836390742323146010217624493209461302110793956693271276112212061160300347253786157118702616220933403632529134774466847262876570368888969692562223878697525589513299274585022635128992964020144355762412959293129465665509154046142937657945930221987891569550751777175790411432103703434358125920404341581368289002418049924549570023453266185480791956802356235114448302819846190207806846899260040361434830827409414031961892987655218806246931985528062105703325273166918168099921822446048397360143992145882951838990600512699307310510335799865461883897241968619893460356707815937312510226714906459647655582422776939439666927258513172008799520026180390160536697998291002308964965547333781793720342526771267021798810973946875624965910950311801174481391924076868534443575804956093304001599912732032798211006672363325636783448175554060687598858244095776594003963420177081250113630165627329418395360253077104885188080650146355653328000290893224005963311092122247877388506081486464374670472519680744686653455266076395832954566114575568605348799156409650382706397832845481155573332363689253313455629692925840408704979728378452084431758267730851044488482446412013890151446284748104648837336145301165390978673890515062814755558787702488955147901023580531970983400905405159718560805774230496518371725178626620366161845717506317837208879515662782030071087031616457284148137374325036816173663254731560096721997")),
         TestScenario(3,2, FormulaOperator.Divide, 1.5.toBigDecimal()),


         TestScenario(BigDecimal.TEN, BigDecimal.valueOf(5), FormulaOperator.Multiply, BigDecimal.valueOf(50)),
         TestScenario(BigDecimal.TEN, BigDecimal.valueOf(5), FormulaOperator.Subtract, BigDecimal.valueOf(5)),
         TestScenario(BigDecimal.TEN, BigDecimal.valueOf(5), FormulaOperator.Subtract, BigDecimal.valueOf(5))
      ).map { scenario ->
         verifyCalculation(scenario, calculator)
      }
   }

   @Test
   fun stringCalculationsBehaveAsExpected() {
      val calculator = StringCalculator()
      listOf(
         TestScenario("Hello", "World", FormulaOperator.Add, "HelloWorld"),
         TestScenario("Hello", "", FormulaOperator.Add, "Hello"),
         TestScenario("Hello", " ", FormulaOperator.Add, "Hello ")
      ).map { scenario ->
         verifyCalculation(scenario, calculator)
      }
   }


   private fun verifyCalculation(scenario: TestScenario, calculator: Calculator) {
      try {
         calculator.calculate(scenario.operator, scenario.values).should.equal(scenario.expected)
      } catch (e: Throwable) {
         fail(scenario.toString() + " - " + e.message)
      }

   }
}
