<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <parent>
      <artifactId>pipelines</artifactId>
      <groupId>io.vyne</groupId>
      <version>0.3.0-SNAPSHOT</version>
   </parent>
   <modelVersion>4.0.0</modelVersion>

   <artifactId>pipeline-runner-cacib-app</artifactId>

   <properties>
      <avro.version>1.8.2</avro.version>
   </properties>


   <dependencies>
      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>pipeline-runner</artifactId>
         <version>0.3.0-SNAPSHOT</version>
      </dependency>

      <dependency>
         <groupId>org.springframework.kafka</groupId>
         <artifactId>spring-kafka-test</artifactId>
         <version>2.2.1.RELEASE</version>
      </dependency>

      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>pipeline-runner</artifactId>
         <version>0.3.0-SNAPSHOT</version>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>io.vyne</groupId>
         <artifactId>vyne</artifactId>
         <version>0.3.0-SNAPSHOT</version>
         <type>test-jar</type>
         <scope>test</scope>
      </dependency>

      <dependency>
         <groupId>org.apache.avro</groupId>
         <artifactId>avro</artifactId>
         <version>${avro.version}</version>
      </dependency>
      <dependency>
         <groupId>org.apache.avro</groupId>
         <artifactId>avro-tools</artifactId>
         <version>${avro.version}</version>
         <scope>test</scope>
      </dependency>
      <dependency>
         <groupId>org.apache.avro</groupId>
         <artifactId>avro-maven-plugin</artifactId>
         <version>${avro.version}</version>
      </dependency>

   </dependencies>

   <build>
      <plugins>
         <plugin>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-maven-plugin</artifactId>
         </plugin>

         <plugin>
            <groupId>org.apache.avro</groupId>
            <artifactId>avro-maven-plugin</artifactId>
            <version>${avro.version}</version>
            <executions>
               <execution>
                  <id>schemas</id>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>schema</goal>
                     <goal>protocol</goal>
                     <goal>idl-protocol</goal>
                  </goals>
                  <configuration>
                     <sourceDirectory>${project.basedir}/src/main/resources/</sourceDirectory>
                     <outputDirectory>${project.build.directory}/generated-sources/cacib</outputDirectory>
                     <stringType>String</stringType>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>org.codehaus.mojo</groupId>
            <artifactId>build-helper-maven-plugin</artifactId>
            <executions>
               <execution>
                  <phase>generate-sources</phase>
                  <goals>
                     <goal>add-source</goal>
                  </goals>
                  <configuration>
                     <sources>
                        <source>${project.build.directory}/generated-sources/cacib</source>
                     </sources>
                  </configuration>
               </execution>
            </executions>
         </plugin>

         <plugin>
            <groupId>io.fabric8</groupId>
            <artifactId>docker-maven-plugin</artifactId>

            <configuration>
               <images>
                  <image>
                     <name>vyneco/${project.artifactId}:${project.version}</name>
                     <build>
                        <dockerFile>${project.basedir}/Dockerfile</dockerFile>
                        <tags>
                           <tag>${docker.tag}</tag>
                        </tags>
                     </build>
                  </image>
               </images>
            </configuration>

            <!-- Connect start/stop to pre- and
                 post-integration-test phase, respectively if you want to start
                 your docker containers during integration tests -->
            <executions>
               <execution>
                  <id>deploy</id>
                  <phase>deploy</phase>
                  <goals>
                     <!-- "build" should be used to create the images with the
                          artifact -->
                     <goal>build</goal>
                     <goal>push</goal>
                  </goals>
               </execution>
            </executions>
         </plugin>

      </plugins>
   </build>
</project>
