include:
   -  template: Terraform/Base.gitlab-ci.yml

variables:
   # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
   # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
   MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
   # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
   # when running from the command line.
   # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
   MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true -U"
   # Used during gitflow interaction.
   MAJOR_RELEASE_DIGIT: 0
   MINOR_RELEASE_DIGIT: 1
   PATCH_RELEASE_DIGIT: 2

   TF_STATE_NAME_DEV: dev
   TF_STATE_NAME_PROD: prod

.git_template: &git_setup |
   git remote set-url --push origin "https://oauth2:${GITLAB_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git"
   git config user.name "vyne-cd"
   git config user.email vyne-cd@vyne.co

stages:
   - build
   - deploy
   - release
   - verify

default:
   tags:
      - docker

.build-jvm:
   stage: build
   image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/maven:3.8.6-eclipse-temurin-11
   tags:
      - docker-heavy
   services:
      -  name: docker:20.10.18-dind
         command: [ "--tls=false" ]
   variables:
      # Instruct Testcontainers to use the daemon of DinD.
      DOCKER_HOST: "tcp://docker:2375"
      # Instruct Docker not to start over TLS.
      DOCKER_TLS_CERTDIR: ""
      # Improve performance with overlayfs.
      DOCKER_DRIVER: overlay2
   cache:
      paths:
         - .m2/repository
      key: "maven-$CI_COMMIT_REF_SLUG"
   script:
      - 'if [ -z "${GITLAB_TOKEN}" ]; then echo "var is blank"; else echo "var is set"; fi'
      - 'if [ -z "${CI_SERVER_HOST}" ]; then echo "var is blank"; else echo "var is set"; fi'
      - 'if [ -z "${CI_PROJECT_PATH}" ]; then echo "var is blank"; else echo "var is set"; fi'
      - 'mvn $MAVEN_CLI_OPTS -version'
      - 'mvn $MAVEN_CLI_OPTS -DbuildNumber=$CI_BUILD_ID $MAVEN_EXTRA_ARGS $MAVEN_GOALS'

      #   Read the POM, grab the version, and set to an env variable
      #   https://stackoverflow.com/a/52241594
      # Run the actual command twice.  The first time ensures that any downloads are
      # already completed, so that when we try to grep the output string, we get a tidy predictable output
      - mvn --non-recursive help:evaluate -Dexpression=project.version
      - mvn --non-recursive help:evaluate -Dexpression=project.version | grep -v '\[.*' > build-version.txt
   artifacts:
      paths:
         - build-version.txt

         # Be careful!  The each of these jar files can get big.
         # If the total size of all jar files being stored in artifacts
         # exceeds 1GB then builds can fail.
         - "cask/target/cask.jar"
         - "pipelines/pipeline-jet/target/pipeline-jet.jar"
         - "schema-server/target/schema-server.jar"
         - "vyne-analytics-server/target/vyne-analytics-server.jar"
         - "vyne-query-service/target/vyne.zip"
         - "test-cli/target/*.zip"
      expire_in: 1 hours
      reports:
         junit:
            # Note:This won't actually work, b/c of https://gitlab.com/gitlab-org/gitlab-runner/issues/2620
            # However, leaving this here to pick up later
            - "*/target/surefire-reports/TEST-*.xml"

build-jvm-branch:
   stage: build
   except:
      - tags
      - develop
      - master
   extends: .build-jvm
   variables:
      MAVEN_GOALS: 'clean install'
      MAVEN_EXTRA_ARGS: ''

build-jvm-develop:
   stage: build
   only:
      - develop
   extends: .build-jvm
   variables:
      MAVEN_GOALS: 'clean deploy'
      # We skip tests on develop and master, as the tests have already run on the branch
      MAVEN_EXTRA_ARGS: "-P snapshot-release -DskipTests"


build-jvm-master:
   stage: build
   only:
      - master
   extends: .build-jvm
   variables:
      MAVEN_GOALS: 'clean deploy'
      # We skip tests on develop and master, as the tests have already run on the branch
      MAVEN_EXTRA_ARGS: '-P release -DskipTests'

release-major:
   variables:
      GIT_STRATEGY: clone
   dependencies: [ ]
   stage: release
   script:
      - *git_setup
      - 'mvn gitflow:release -B -DversionDigitToIncrement=$MAJOR_RELEASE_DIGIT -DskipTestProject=true'
   only:
      - develop
   when: manual

release-minor:
   variables:
      GIT_STRATEGY: clone
   dependencies: [ ]
   stage: release
   script:
      - *git_setup
      - 'mvn gitflow:release -B -DversionDigitToIncrement=$MINOR_RELEASE_DIGIT -DskipTestProject=true'
   only:
      - develop
   when: manual

release-patch:
   variables:
      GIT_STRATEGY: clone
   dependencies: [ ]
   stage: release
   script:
      - *git_setup
      - 'mvn gitflow:release -B -DversionDigitToIncrement=$PATCH_RELEASE_DIGIT -DskipTestProject=true'
   only:
      - develop
   when: manual

regression-test:
   stage: verify
   resource_group: docker_release
   variables:
      VYNE_DOCKER_TAG: latest
   script:
      - mvn clean install -DskipTests -Dskip.npm
      - cd regression-tests
      - mvn -Dtest=TaxonomyRegressionTest -Drun.mode=docker -Dvyne.tag=${VYNE_DOCKER_TAG} test
   when: manual
   artifacts:
      when: always
      reports:
         junit:
            - target/surefire-reports/TEST-*.xml


# This creates the multi-platform Docker images
.publish-docker:
   stage: deploy
   image: ${CI_DEPENDENCY_PROXY_GROUP_IMAGE_PREFIX}/jdrouet/docker-with-buildx:20.10.17-0.8.2
   rules:
      -  if: $CI_PIPELINE_SOURCE == "merge_request_event"
         when: never
      -  if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master")
      -  if: ($CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master")
         when: manual
         allow_failure: true
   variables:
      DOCKER_HOST: tcp://docker:2375/
      DOCKER_TLS_CERTDIR: "" # Instruct Docker not to start over TLS.
      DOCKER_DRIVER: overlay2
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      PROGRESS_NO_TRUNC: 1
   services:
      -  name: docker:20.10.18-dind
         command: ["--tls=false"]
   before_script:
      - PROJECT_VERSION=$(cat build-version.txt)
      - docker info
      - docker buildx create --use
      - docker run --privileged --rm tonistiigi/binfmt --install all # Install the required emulators in order to build ARM images
      - docker buildx ls
      - docker login -u vynecd -p $DOCKER_HUB_PASSWORD
      - |
         if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
           tag="latest"
           versionTag="$PROJECT_VERSION"
         elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
            tag="latest-preview"
            versionTag="$PROJECT_VERSION-BETA-$CI_COMMIT_SHORT_SHA"
         else
            tag="$CI_COMMIT_BRANCH"
            versionTag="$PROJECT_VERSION-BETA-$CI_COMMIT_SHORT_SHA"
         fi
         echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
         echo "Running on branch '$CI_COMMIT_BRANCH': version = $versionTag"
   script:
      - cd $projectDir
      - pwd
      - >
         docker buildx build
         --platform linux/arm64/v8,linux/amd64
         --push
         -t "vyneco/${microservice}:${tag}"
         -t "vyneco/${microservice}:${versionTag}" .

publish-vyne-docker:
   extends: .publish-docker
   variables:
      projectDir: vyne-query-service
      microservice: vyne

publish-cask-docker:
   extends: .publish-docker
   variables:
      projectDir: cask
      microservice: cask

publish-pipeline-jet-docker:
   extends: .publish-docker
   variables:
      projectDir: pipelines/pipeline-jet
      microservice: pipeline

publish-schema-server-docker:
   extends: .publish-docker
   variables:
      projectDir: schema-server
      microservice: schema-server

publish-analytics-server-docker:
   extends: .publish-docker
   variables:
      projectDir: vyne-analytics-server
      microservice: analytics-server

terraform-fmt:
   extends: .terraform:fmt
   needs: [ ]
   stage: build

terraform-validate:
   extends: .terraform:validate
   needs: [ ]
   stage: build

build-helm:
   stage: build
   image:
      name: alpine/helm:3.10.0
      entrypoint: [""]
   script:
      - cd ${CI_PROJECT_DIR}/infra/helm/vyne-helm
      - helm package .
      - helm repo index .
      - cp *.tgz charts
      - cp artifacthub-repo.yml index.yaml charts
   artifacts:
      paths:
         - infra/helm/vyne-helm/charts

.terraform-deploy:
   extends: .terraform:deploy
   before_script:
      - cd ${TF_ROOT}
      - gitlab-terraform plan
      - gitlab-terraform plan-json

terraform-deploy-dev:
   extends: .terraform-deploy
   environment:
      name: $TF_STATE_NAME_DEV
   variables:
      TF_ROOT: ${CI_PROJECT_DIR}/infra/terraform/environments/$TF_STATE_NAME_DEV
      TF_STATE_NAME: $TF_STATE_NAME_DEV
      TF_VAR_environment: $TF_STATE_NAME_DEV
   rules:
      - if: $CI_COMMIT_BRANCH == "develop"

terraform-deploy-prod:
   extends: .terraform-deploy
   environment:
      name: $TF_STATE_NAME_PROD
   variables:
      TF_ROOT: ${CI_PROJECT_DIR}/infra/terraform/environments/$TF_STATE_NAME_PROD
      TF_STATE_NAME: $TF_STATE_NAME_PROD
      TF_VAR_environment: $TF_STATE_NAME_PROD
   rules:
      - if: $CI_COMMIT_BRANCH == "main"

e2e-tests:
   stage: verify
   image: docker:20.10.18-dind
   rules:
      -  if: $CI_PIPELINE_SOURCE == "merge_request_event"
         when: never
      -  if: ($CI_COMMIT_BRANCH == "develop" || $CI_COMMIT_BRANCH == "master")
      -  if: ($CI_COMMIT_BRANCH != "develop" && $CI_COMMIT_BRANCH != "master")
         when: manual
         allow_failure: true
   needs:
      - publish-vyne-docker
      - publish-schema-server-docker
      - build-jvm-branch
   dependencies:
      - build-jvm-branch
   allow_failure: true
   variables:
      DOCKER_HOST: tcp://docker:2375/
      DOCKER_TLS_CERTDIR: "" # Instruct Docker not to start over TLS.
      DOCKER_DRIVER: overlay2
      DOCKER_BUILDKIT: 1
      BUILDKIT_PROGRESS: plain
      PROGRESS_NO_TRUNC: 1
   services:
      -  name: docker:20.10.18-dind
         command: [ "--tls=false" ]
   before_script:
      - PROJECT_VERSION=$(cat build-version.txt)
      - |
         if [[ "$CI_COMMIT_BRANCH" == "master" ]]; then
           tag="latest"
           versionTag="$PROJECT_VERSION"
         elif [[ "$CI_COMMIT_BRANCH" == "develop" ]]; then
            tag="latest-preview"
            versionTag="$PROJECT_VERSION-BETA-$CI_COMMIT_SHORT_SHA"
         else
            tag="$CI_COMMIT_BRANCH"
            versionTag="$PROJECT_VERSION-BETA-$CI_COMMIT_SHORT_SHA"
         fi
         echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
         echo "Running on branch '$CI_COMMIT_BRANCH': version = $versionTag"
      - cd e2e-tests/
      - docker build -t e2e .
   script:
      - cd demos/
      - mkdir -p vyne/schema-server/projects
      - mkdir -p vyne/config
      - wget https://gitlab.com/vyne/demos/-/raw/master/films/docker-compose.yml
      - wget https://gitlab.com/vyne/demos/-/raw/master/films/docker/schema-server/schema-server.conf -P vyne/schema-server
      - wget https://gitlab.com/vyne/demos/-/raw/master/films/docker/schema-server/projects/taxi.conf -P vyne/schema-server/projects
      - wget https://gitlab.com/vyne/demos/-/raw/master/films/services.conf -P vyne/config
      - VYNE_VERSION=$versionTag docker compose -f docker-compose.yml -f e2e.docker-compose.yml up --exit-code-from e2e
